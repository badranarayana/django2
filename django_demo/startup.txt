# creating Dev environment to work with django


tech stack:
--> python
--> DJango
--> mysql

UI
HTML css, js


---------------------------------------------------------
step #1: create virtual environment of python

$  virtualenv mydjangoenv


# step #2: activate environment
$  .\mydjangoenv\Scripts\activate


# step #3 : install django package

$  pip install django


lets very django import working or not

--> python
--> import django
--> django.get_version()
--> exit()

-----------------------------------------------


# lets create django project by using django admin command

$ django-admin startproject django_demo



# lets run django server

$ python manage.py runserver

apply migration

$ python manage.py migrate


# lets create super user to access django admin app
$ python manage.py createsuperuser


user/pass: admin/admin@123


-----------------
step #2:

how to create apps in django and work with apps?

django project
  --> collection of apps(built-in apps)
  --> contact


# create app in django project with manage.py command

$ python manage.py startapp contact

above command creates app(contact) folder inside project

# next step is register newly created app contact in django installed_apps list in settings.py



# lets create contact model for db table
URL --> python function(view) --> db(model) --> html(template)


topic #1 : models
model is a python class which the represents the db table,
we use model class to interact with data in database table

how do we create a model in django?
ans: Django provides built in class called Model.
 We can create new class by extending/inheriting from Model class

 from django.db import models


 class Contact(models.Model):
     pass


# how do we sync django models with database?

step# 1
$ python manage.py makemigrations

-> the above command creates python migration file in side migrations folder

step #2:
 $ python manage.py migrate
 this command looks at migrations folder and apply if unapplied migrations exits


# CRUD operations
# c --> create/insert
# R --> read/Select
# U --> update
# D --> Delete

# plain sql
# create
  insert into table(...)
# read
  select * from table
# update
  update table_name set col = 'val' where id=1
# delete
  delete from table_name where id=2


ORM --> object relational mapper

app_name: contact

model : contact(attributes)
table_name : contact_contact(columns)

#object = contact()
------------------------

how do we test django crud operations?

$ python manage.py shell


(mydjangoenv) C:\Users\91901\Desktop\django2\django_demo>python manage.py shell
Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)

>>> from contact.models import Contact
>>> # lets create record in db
>>> obj = Contact(name='yeswant', mobile_number='856223333', date_of_birth='1990-02-23', email='yes@gmail.com', location='hyd')
>>> # lets save the data into db
>>> obj.save()

>>> # read data from db
>>> contacts = Contact.objects.all()  # select * from contact
>>> contacts
<QuerySet [<Contact: Contact object (1)>]>
>>> contacts[0]
<Contact: Contact object (1)>
>>> contacts[0].name
'yeswant'
>>> contacts[0].mobile_number
'856223333'
>>> contacts[0].email
'yes@gmail.com'

>>> obj = Contact(name='ram', mobile_number='856223334', date_of_birth='1990-03-23', email='ram@gmail.com', location='hyd')
>>> obj.save()
>>> contacts = Contact.objects.all()  # select * from contact
>>> contacts
<QuerySet [<Contact: Contact object (1)>, <Contact: Contact object (2)>]>

>>> # name of each record
>>> contacts[0]
<Contact: Contact object (1)>
>>> contacts[0].name
'yeswant'
>>> contacts[1].name
'ram'

>>> # lets update ram email address
>>> # fecth the ram record from db
>>> ram_obj = Contact.objects.get(pk=2)
>>> ram_obj
<Contact: Contact object (2)>
>>> ram_obj.name
'ram'

>>> #lets update email
>>> ram_obj.email = "ramps@gmail.com"
>>> ram_obj.save()   # update contact sysntax
>>> ram_obj = Contact.objects.get(pk=2) # lets relaod from db
>>> ram_obj.email
'ramps@gmail.com'

>>> # lets update location
>>> ram_obj.location = "Bangalore"
>>> ram_obj.save()

>>> ram_obj = Contact.objects.get(pk=2) # lets reload from db
>>> ram_obj.location
'Bangalore'
>>> ram_obj.location
'Bangalore'
>>>
>>>
>>>
>>>
>>> # lets delete yeswant
>>> yes_obj = Contact.objects.get(pk=1)
>>> yes_obj.name
'yeswant'
>>> yes_obj.delete()  # delete sql statement
(1, {'contact.Contact': 1})
>>>
-----------------------------------------------------------

lets create an url and views in django

url --> path to access resources in server

url --> view functions

ex:

/contact/create  --> view function(python)

view -->python function,  will invoke by django when requested url matches

step #1:
# urls.py file in app directory

from django.urls import path
from .views import index

urlpatterns = [
    path('index/', index),
]
------------------------------------------

step #2: create view function

from django.shortcuts import render, HttpResponse

# Create your views here.

def index(request):
    # keep
    return HttpResponse("Response coming from index view")

---------------------------------------------------

step #2: include app urls.py file in project urls.py

project urls.py
--------------
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('contact/', include('contact.urls'))
]


# how do access index view functionality

url: http://127.0.0.1:8000/admin
     http://127.0.0.1:8000/contact/index
     http://127.0.0.1:8000/contact/get-contacts

note: every url having map to view function
----------------------------------------------



# contact use case:
------------------
html(UI) --> for taking input from the user
url --> to handle contact creation request
view function to handle the request


# lets create url  and view

url: http://127.0.0.1:8000/contact/create
http method : GET
http method : POST

-------------------------------------------------
Django templates:
# django templates(html) is used to render the dynamic data(db data) in html document
# we can write python code within html template with help of django template syntax

# python code examples in django template

# for
{% for name in data %}
 <p> Hello, {{ name }} </p>
{% endfor %}


# if
{% if emp_salary > 20 %}
  <b> eligible for hike <b>
{% elif emp_salary == 15 %}
  <b> No eligiblity or hike </b>
{% endif %}

# {{ }}  --> to display content of variable in html

# template inheritance(extending)

# template tags and filters
-------------------------------------------------


# how do we refer url paths in templates?
{% url 'urlname' %}

ex: <a href="{% url 'create-contact' %}"> Create Contact</a>


# how to configure static file in django?

1) update settings.py
#Location of static files
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]

can access with static url prefix
http://127.0.0.1:8000/static/css/style.css



# how do refer/load static files in templates?

reference: https://djangocentral.com/static-assets-in-django/#:~:text=1%20Configuring%20Static%20Files%20in%20Django.%20In%20settings.py,%25%7D%20template%20filer%20to%20include%20different%20static%20assets.

{% load static % }
<link rel="stylesheet" href="{% static 'css/style.css' %}">
<script  src="{% static 'js/contact.js' %}"></script>
<img src="{% static 'images/nature_img.jpeg' %}">



































































